//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: remotemessage.proto

package remote;

@kotlin.jvm.JvmName("-initializeremoteStart")
inline fun remoteStart(block: remote.RemoteStartKt.Dsl.() -> kotlin.Unit): remote.Remotemessage.RemoteStart =
  remote.RemoteStartKt.Dsl._create(remote.Remotemessage.RemoteStart.newBuilder()).apply { block() }._build()
object RemoteStartKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: remote.Remotemessage.RemoteStart.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: remote.Remotemessage.RemoteStart.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): remote.Remotemessage.RemoteStart = _builder.build()

    /**
     * <code>bool started = 1;</code>
     */
    var started: kotlin.Boolean
      @JvmName("getStarted")
      get() = _builder.getStarted()
      @JvmName("setStarted")
      set(value) {
        _builder.setStarted(value)
      }
    /**
     * <code>bool started = 1;</code>
     */
    fun clearStarted() {
      _builder.clearStarted()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun remote.Remotemessage.RemoteStart.copy(block: remote.RemoteStartKt.Dsl.() -> kotlin.Unit): remote.Remotemessage.RemoteStart =
  remote.RemoteStartKt.Dsl._create(this.toBuilder()).apply { block() }._build()

