//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: remotemessage.proto

package remote;

@kotlin.jvm.JvmName("-initializeremoteConfigure")
inline fun remoteConfigure(block: remote.RemoteConfigureKt.Dsl.() -> kotlin.Unit): remote.Remotemessage.RemoteConfigure =
  remote.RemoteConfigureKt.Dsl._create(remote.Remotemessage.RemoteConfigure.newBuilder()).apply { block() }._build()
object RemoteConfigureKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: remote.Remotemessage.RemoteConfigure.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: remote.Remotemessage.RemoteConfigure.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): remote.Remotemessage.RemoteConfigure = _builder.build()

    /**
     * <code>int32 code1 = 1;</code>
     */
    var code1: kotlin.Int
      @JvmName("getCode1")
      get() = _builder.getCode1()
      @JvmName("setCode1")
      set(value) {
        _builder.setCode1(value)
      }
    /**
     * <code>int32 code1 = 1;</code>
     */
    fun clearCode1() {
      _builder.clearCode1()
    }

    /**
     * <code>.remote.RemoteDeviceInfo device_info = 2;</code>
     */
    var deviceInfo: remote.Remotemessage.RemoteDeviceInfo
      @JvmName("getDeviceInfo")
      get() = _builder.getDeviceInfo()
      @JvmName("setDeviceInfo")
      set(value) {
        _builder.setDeviceInfo(value)
      }
    /**
     * <code>.remote.RemoteDeviceInfo device_info = 2;</code>
     */
    fun clearDeviceInfo() {
      _builder.clearDeviceInfo()
    }
    /**
     * <code>.remote.RemoteDeviceInfo device_info = 2;</code>
     * @return Whether the deviceInfo field is set.
     */
    fun hasDeviceInfo(): kotlin.Boolean {
      return _builder.hasDeviceInfo()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun remote.Remotemessage.RemoteConfigure.copy(block: remote.RemoteConfigureKt.Dsl.() -> kotlin.Unit): remote.Remotemessage.RemoteConfigure =
  remote.RemoteConfigureKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val remote.Remotemessage.RemoteConfigureOrBuilder.deviceInfoOrNull: remote.Remotemessage.RemoteDeviceInfo?
  get() = if (hasDeviceInfo()) getDeviceInfo() else null

